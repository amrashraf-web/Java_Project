pipeline {
    agent any

    environment {
        sonar_url = 'http://amrashraf.com:9000/sonarqube'
        sonar_project_key = 'my-java-app'
        sonar_project_name = 'my-java-app'
        VERSION_PREFIX = '0.1.'
        BETA_VERSION_FILE = "${HOME}/beta_version.txt"
        nexus_url = 'amrashraf.com:8082'
    }

    stages {
        stage('Reset Workspace') {
            steps {
                cleanWs()
            }
        }

        stage('Checkout') {
            steps {
                script {
                    def gitCredentialsId = 'github_key'
                    checkout([
                        $class: 'GitSCM',
                        branches: [[name: 'develop']],
                        userRemoteConfigs: [[
                            url: 'https://github.com/amrashraf-web/Java_Project.git',
                            credentialsId: gitCredentialsId
                        ]]
                    ])
                    sh "git clean -dfx"
                }
            }
        }
        stage('Build and Test') {
            steps {
                script {
                    def majorVersion = Integer.parseInt(VERSION_PREFIX.tokenize('.')[0])
                    def minorVersion = Integer.parseInt(VERSION_PREFIX.tokenize('.')[1])
                    def buildNumber = BUILD_NUMBER.toInteger()
                    def minorIncrement = (buildNumber / 10).toInteger()
                    minorVersion += minorIncrement
                    buildNumber %= 10
                    betaVersion = "${majorVersion}.${minorVersion}.${buildNumber}-beta"
                    env.VERSION_PREFIX = "${majorVersion}.${minorVersion}"
                    env.BUILD_NUMBER = "${buildNumber}"
        
                    sh """
                       echo \"${betaVersion}\"
                       echo \"VERSION_PREFIX=${VERSION_PREFIX}\" > ${WORKSPACE}/version.properties
                       echo \"BUILD_NUMBER=${BUILD_NUMBER}\" >> ${WORKSPACE}/version.properties
                       chmod +x \"${WORKSPACE}/automations/bin\"/*.sh &&
                       \"${WORKSPACE}/automations/bin/compile.sh\" "maven_extra_arguments=-s .m2/settings.xml" "version=${betaVersion}" "sonar_url=$SONAR_URL" "sonar_project_key=$SONAR_PROJECT_KEY" "sonar_project_name=$SONAR_PROJECT_NAME" &&
                       mkdir -p \"${WORKSPACE}/publish-artifacts\" &&
                       cp target/hello-world-web.war \"${WORKSPACE}/publish-artifacts/hello-world-web-${betaVersion}.war\"
                    """
                }
            }
        }
        stage('Docker Build') {
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: 'nexus', passwordVariable: 'Nexus_Password', usernameVariable: 'Nexus_Username')]) {
                        sh "echo ${Nexus_Password} | docker login --username ${Nexus_Username} --password-stdin ${nexus_url}"
                    }

                    def dockerImageTag = "${nexus_url}/my-java-app:${betaVersion}"
                    sh "docker build -t ${dockerImageTag} -f Dockerfile ."
                }
            }
        }
        stage('Helm Package') {
            steps {
                script {
                    def helmChartDir = "mychart"
                    def helmPackagePath = "my-java-app-${betaVersion}.tar.gz"
                    sh """
                        cd ${helmChartDir}
                        sed -i "s#PLACEHOLDER_VERSION#${betaVersion}#g" values.yaml
                        tar cfz ${helmPackagePath} *
                    """
                }
            }
        }
    
        stage('Publish to Nexus') {
            steps {
                script {
                    def helmPackageRepo = "amrashraf.com:8081/repository/my-java-app-helm/"
                    sh "docker push ${nexus_url}/my-java-app:${betaVersion}"
    
                    // Publish Helm package file to Nexus
                    sh "curl -v -u admin:admin --upload-file mychart/my-java-app-${betaVersion}.tar.gz ${helmPackageRepo}"
                }
            }
        }
    }
    post {
        success {
            script {
                def homeDirectory = sh(script: 'echo $HOME', returnStdout: true).trim()
                echo "Home Directory: ${homeDirectory}"
                sh "echo '${betaVersion}' >> ${BETA_VERSION_FILE}"
            }
            archiveArtifacts "publish-artifacts/hello-world-web-${betaVersion}.war"
        }
    }

}
