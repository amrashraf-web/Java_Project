pipeline {
    agent any

    environment {
        sonar_url = 'http://amrashraf.com:9000/sonarqube'
        sonar_project_key = 'my-java-app'
        sonar_project_name = 'my-java-app'
        VERSION_PREFIX = '0.1.'
        BETA_VERSION_FILE = "${HOME}/beta_version.txt"
        nexus_url = 'amrashraf.com:8082'
        VERSION_FILE = 'version.txt'
    }
                        
    stages {
        stage('Reset Workspace') {
            steps {
                cleanWs()
            }
        }

        stage('Checkout') {
            steps {
                script {
                    def gitCredentialsId = 'github_key'
                    checkout([
                        $class: 'GitSCM',
                        branches: [[name: 'develop']],
                        userRemoteConfigs: [[
                            url: 'https://github.com/amrashraf-web/Java_Project.git',
                            credentialsId: gitCredentialsId
                        ]]
                    ])
                    sh "git clean -dfx"
                }
            }
        }
        stage('Get Latest Version') {
            steps {
                script {
                    sh '''
                        chmod +x increment_version.sh
                        ./increment_version.sh
                    '''
                    // Check if any tags exist
                    def tagList = sh(script: 'git tag -l', returnStdout: true).trim()

                    if (tagList) {
                        // Get the latest version from the GitHub repository
                        def currentVersion = sh(script: 'git describe --abbrev=0 --tags', returnStdout: true).trim()

                        // Split the version components
                        def versionComponents = currentVersion.split('\\.')

                        // Increment the last component
                        def lastComponent = versionComponents[-1].toInteger() + 1

                        // Check if it's time to increment the second component
                        if (lastComponent > 9) {
                            versionComponents[-1] = '0'
                            versionComponents[-2] = (versionComponents[-2].toInteger() + 1).toString()
                        } else {
                            versionComponents[-1] = lastComponent.toString()
                        }

                        // Assemble the new version
                        env.NEW_VERSION = versionComponents.join('.')
                    } else {
                        // If no tags found, set initial version
                        env.NEW_VERSION = '0.0.0-beta'
                    }

                    echo "New version: ${NEW_VERSION}"
                }
            }
        }

        stage('Commit and Push') {
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: 'github_key', passwordVariable: 'Github_Password', usernameVariable: 'Github_Username')]) {
                        // Set Git user information
                        sh "git config user.name 'amrashraf-web'"
                        sh "git config user.email 'eng.amrashraf3@gmail.com'"
        
                        // Commit and push only if the version has changed
                        sh 'git checkout develop'
                        sh "git commit -am 'Bump version to ${NEW_VERSION}'"
                        sh "git tag ${NEW_VERSION}"
                        sh 'git push origin develop --tags'
                    }
                }
            }
        }


        // stage('Build and Test') {
        //     steps {
        //         script {
        //             def majorVersion = Integer.parseInt(VERSION_PREFIX.tokenize('.')[0])
        //             def minorVersion = Integer.parseInt(VERSION_PREFIX.tokenize('.')[1])
        //             def buildNumber = BUILD_NUMBER.toInteger()
        //             def minorIncrement = (buildNumber / 10).toInteger()
        //             minorVersion += minorIncrement
        //             buildNumber %= 10
        //             betaVersion = "${majorVersion}.${minorVersion}.${buildNumber}-beta"
        //             env.VERSION_PREFIX = "${majorVersion}.${minorVersion}"
        //             env.BUILD_NUMBER = "${buildNumber}"
        
        //             sh """
        //                echo \"${betaVersion}\"
        //                echo \"VERSION_PREFIX=${VERSION_PREFIX}\" > ${WORKSPACE}/version.properties
        //                echo \"BUILD_NUMBER=${BUILD_NUMBER}\" >> ${WORKSPACE}/version.properties
        //                chmod +x \"${WORKSPACE}/automations/bin\"/*.sh &&
        //                \"${WORKSPACE}/automations/bin/compile.sh\" "maven_extra_arguments=-s .m2/settings.xml" "version=${betaVersion}" "sonar_url=$SONAR_URL" "sonar_project_key=$SONAR_PROJECT_KEY" "sonar_project_name=$SONAR_PROJECT_NAME" &&
        //                mkdir -p \"${WORKSPACE}/publish-artifacts\" &&
        //                cp target/hello-world-web.war \"${WORKSPACE}/publish-artifacts/hello-world-web-${betaVersion}.war\"
        //             """
        //         }
        //     }
        // }
        // stage('Docker Build') {
        //     steps {
        //         script {
        //             withCredentials([usernamePassword(credentialsId: 'nexus', passwordVariable: 'Nexus_Password', usernameVariable: 'Nexus_Username')]) {
        //                 sh "echo ${Nexus_Password} | docker login --username ${Nexus_Username} --password-stdin ${nexus_url}"
        //             }

        //             def dockerImageTag = "${nexus_url}/my-java-app:${betaVersion}"
        //             sh "docker build -t ${dockerImageTag} -f Dockerfile ."
        //         }
        //     }
        // }
        // stage('Helm Package') {
        //     steps {
        //         script {
        //             def helmChartDir = "mychart"
        //             def helmPackagePath = "my-java-app-${betaVersion}.tar.gz"
        //             sh """
        //                 cd ${helmChartDir}
        //                 sed -i "s#PLACEHOLDER_VERSION#${betaVersion}#g" values.yaml
        //                 helm package .
        //                 mv mychart-0.1.0.tgz my-java-app-${betaVersion}.tgz
        //             """
        //         }
        //     }
        // }
    
        // stage('Publish to Nexus') {
        //     steps {
        //         script {
        //             sh "docker push ${nexus_url}/my-java-app:${betaVersion}"
        //             sh "curl -v -u admin:admin --upload-file mychart/my-java-app-${betaVersion}.tgz http://amrashraf.com:8081/repository/my-java-app-helm/my-chart-app-${betaVersion}.tgz"

        //         }
        //     }
        // }
    }
    // post {
    //     success {
    //         script {
    //             def homeDirectory = sh(script: 'echo $HOME', returnStdout: true).trim()
    //             echo "Home Directory: ${homeDirectory}"
    //             sh "echo '${betaVersion}' >> ${BETA_VERSION_FILE}"
    //         }
    //         archiveArtifacts "publish-artifacts/hello-world-web-${betaVersion}.war"
    //     }
    // }

}
