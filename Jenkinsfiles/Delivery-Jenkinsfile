pipeline {
    agent any

    environment {
        sonar_url = 'http://amrashraf.com:9000/sonarqube'
        sonar_project_key = 'my-java-app'
        sonar_project_name = 'my-java-app'
        VERSION_PREFIX = '0.1.'
        BETA_VERSION_FILE = "${HOME}/beta_version.txt"
        nexus_url = 'amrashraf.com:8082'
        git_username = credentials('github_key').username
        git_password = credentials('github_key').password
    }
                        
    stages {
        stage('Reset Workspace') {
            steps {
                cleanWs()
            }
        }

        stage('Checkout') {
            steps {
                script {
                    def gitCredentialsId = 'github_key'
                    checkout([
                        $class: 'GitSCM',
                        branches: [[name: 'develop']],
                        userRemoteConfigs: [[
                            url: 'https://github.com/amrashraf-web/Java_Project.git',
                            credentialsId: gitCredentialsId
                        ]]
                    ])
                    sh "git clean -dfx"
                }
            }
        }
        stage('Get Last Version') {
            steps {
                script {
                    // Get the last Git tag on the develop branch
                    def lastTag = sh(script: 'git describe --tags --abbrev=0 || echo "0.0.0"', returnStdout: true).trim()
        
                    // If 'git describe' fails, create a new tag and use it as the last version
                    if (lastTag == "0.0.0") {
                        // Get the latest beta version
                        def latestBetaVersion = sh(script: 'git tag -l "0.0.*-beta" | sort -V | tail -n 1', returnStdout: true).trim()
        
                        // Extract the beta version and increment it
                        def betaVersion = latestBetaVersion ? latestBetaVersion.replaceAll(/.*\.(.*)-beta/, { _, betaVersion -> "${betaVersion.toInteger() + 1}" }) : 1
        
                        // Create a new tag with the incremented beta version
                        def newTagName = "0.0.${betaVersion}-beta"

                        // Create the tag and push it using GitHub credentials
                        withCredentials([usernamePassword(credentialsId: 'github_key', passwordVariable: 'Github_password', usernameVariable: 'Github_username')]) {
                            sh "git tag ${newTagName} && git push https://${Github_username}:${Github_password}@github.com/${Github_username}/Java_Project.git refs/tags/${newTagName}:refs/heads/develop"
                        }
                        
                        
                        // Use the newly created tag as the last version
                        lastTag = newTagName
                    }
        
                    // Extract the patch version and increment it
                    def newVersion = lastTag.replaceAll(/.*\.(.*)\..*/, { _, patchVersion -> "${patchVersion.toInteger() + 1}" })
        
                    // Print the last version and the new version
                    echo "Last version: ${lastTag}"
                    echo "New version: ${newVersion}"
        
                    // Write the new version back to the file
                    writeFile(file: VERSION_FILE, text: newVersion)
                }
            }
        }



        stage('Build and Test') {
            steps {
                script {
                    def majorVersion = Integer.parseInt(VERSION_PREFIX.tokenize('.')[0])
                    def minorVersion = Integer.parseInt(VERSION_PREFIX.tokenize('.')[1])
                    def buildNumber = BUILD_NUMBER.toInteger()
                    def minorIncrement = (buildNumber / 10).toInteger()
                    minorVersion += minorIncrement
                    buildNumber %= 10
                    betaVersion = "${majorVersion}.${minorVersion}.${buildNumber}-beta"
                    env.VERSION_PREFIX = "${majorVersion}.${minorVersion}"
                    env.BUILD_NUMBER = "${buildNumber}"
        
                    sh """
                       echo \"${betaVersion}\"
                       echo \"VERSION_PREFIX=${VERSION_PREFIX}\" > ${WORKSPACE}/version.properties
                       echo \"BUILD_NUMBER=${BUILD_NUMBER}\" >> ${WORKSPACE}/version.properties
                       chmod +x \"${WORKSPACE}/automations/bin\"/*.sh &&
                       \"${WORKSPACE}/automations/bin/compile.sh\" "maven_extra_arguments=-s .m2/settings.xml" "version=${betaVersion}" "sonar_url=$SONAR_URL" "sonar_project_key=$SONAR_PROJECT_KEY" "sonar_project_name=$SONAR_PROJECT_NAME" &&
                       mkdir -p \"${WORKSPACE}/publish-artifacts\" &&
                       cp target/hello-world-web.war \"${WORKSPACE}/publish-artifacts/hello-world-web-${betaVersion}.war\"
                    """
                }
            }
        }
        stage('Docker Build') {
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: 'nexus', passwordVariable: 'Nexus_Password', usernameVariable: 'Nexus_Username')]) {
                        sh "echo ${Nexus_Password} | docker login --username ${Nexus_Username} --password-stdin ${nexus_url}"
                    }

                    def dockerImageTag = "${nexus_url}/my-java-app:${betaVersion}"
                    sh "docker build -t ${dockerImageTag} -f Dockerfile ."
                }
            }
        }
        stage('Helm Package') {
            steps {
                script {
                    def helmChartDir = "mychart"
                    def helmPackagePath = "my-java-app-${betaVersion}.tar.gz"
                    sh """
                        cd ${helmChartDir}
                        sed -i "s#PLACEHOLDER_VERSION#${betaVersion}#g" values.yaml
                        helm package .
                        mv mychart-0.1.0.tgz my-java-app-${betaVersion}.tgz
                    """
                }
            }
        }
    
        stage('Publish to Nexus') {
            steps {
                script {
                    sh "docker push ${nexus_url}/my-java-app:${betaVersion}"
                    sh "curl -v -u admin:admin --upload-file mychart/my-java-app-${betaVersion}.tgz http://amrashraf.com:8081/repository/my-java-app-helm/my-chart-app-${betaVersion}.tgz"

                }
            }
        }
    }
    post {
        success {
            script {
                def homeDirectory = sh(script: 'echo $HOME', returnStdout: true).trim()
                echo "Home Directory: ${homeDirectory}"
                sh "echo '${betaVersion}' >> ${BETA_VERSION_FILE}"
            }
            archiveArtifacts "publish-artifacts/hello-world-web-${betaVersion}.war"
        }
    }

}
