pipeline {
    agent any

    environment {
        sonar_url = 'http://amrashraf.com:9000/sonarqube'
        sonar_project_key = 'my-java-app'
        sonar_project_name = 'my-java-app'
        VERSION_PREFIX = '0.1.'
        BETA_VERSION_FILE = "${HOME}/beta_version.txt"
        nexus_url = 'amrashraf.com:8082'
        VERSION_FILE = 'version.txt'
        GIT_REPO_URL = 'https://github.com/amrashraf-web/Java_Project.git'
        GIT_CREDENTIALS_ID = 'github_key'
    }
                        
    stages {
        stage('Reset Workspace') {
            steps {
                cleanWs()
            }
        }

        stage('Checkout') {
            steps {
                script {
                    def gitCredentialsId = 'github_key'
                    checkout([
                        $class: 'GitSCM',
                        branches: [[name: 'develop']],
                        userRemoteConfigs: [[
                            url: 'https://github.com/amrashraf-web/Java_Project.git',
                            credentialsId: gitCredentialsId
                        ]]
                    ])
                    sh "git clean -dfx"
                }
            }
        }
        stage('Get Latest Version') {
            steps {
                script {
                    def latestVersion = getVersionFromGitHub()
                    def newVersion = incrementVersion(latestVersion)
                    env.NEW_VERSION = newVersion
                }
            }
        }

        stage('Commit and Push') {
            steps {
                script {
                    def version = env.NEW_VERSION
                    commitAndPush(version)
                }
            }
        }



        // stage('Build and Test') {
        //     steps {
        //         script {
        //             def majorVersion = Integer.parseInt(VERSION_PREFIX.tokenize('.')[0])
        //             def minorVersion = Integer.parseInt(VERSION_PREFIX.tokenize('.')[1])
        //             def buildNumber = BUILD_NUMBER.toInteger()
        //             def minorIncrement = (buildNumber / 10).toInteger()
        //             minorVersion += minorIncrement
        //             buildNumber %= 10
        //             betaVersion = "${majorVersion}.${minorVersion}.${buildNumber}-beta"
        //             env.VERSION_PREFIX = "${majorVersion}.${minorVersion}"
        //             env.BUILD_NUMBER = "${buildNumber}"
        
        //             sh """
        //                echo \"${betaVersion}\"
        //                echo \"VERSION_PREFIX=${VERSION_PREFIX}\" > ${WORKSPACE}/version.properties
        //                echo \"BUILD_NUMBER=${BUILD_NUMBER}\" >> ${WORKSPACE}/version.properties
        //                chmod +x \"${WORKSPACE}/automations/bin\"/*.sh &&
        //                \"${WORKSPACE}/automations/bin/compile.sh\" "maven_extra_arguments=-s .m2/settings.xml" "version=${betaVersion}" "sonar_url=$SONAR_URL" "sonar_project_key=$SONAR_PROJECT_KEY" "sonar_project_name=$SONAR_PROJECT_NAME" &&
        //                mkdir -p \"${WORKSPACE}/publish-artifacts\" &&
        //                cp target/hello-world-web.war \"${WORKSPACE}/publish-artifacts/hello-world-web-${betaVersion}.war\"
        //             """
        //         }
        //     }
        // }
        // stage('Docker Build') {
        //     steps {
        //         script {
        //             withCredentials([usernamePassword(credentialsId: 'nexus', passwordVariable: 'Nexus_Password', usernameVariable: 'Nexus_Username')]) {
        //                 sh "echo ${Nexus_Password} | docker login --username ${Nexus_Username} --password-stdin ${nexus_url}"
        //             }

        //             def dockerImageTag = "${nexus_url}/my-java-app:${betaVersion}"
        //             sh "docker build -t ${dockerImageTag} -f Dockerfile ."
        //         }
        //     }
        // }
        // stage('Helm Package') {
        //     steps {
        //         script {
        //             def helmChartDir = "mychart"
        //             def helmPackagePath = "my-java-app-${betaVersion}.tar.gz"
        //             sh """
        //                 cd ${helmChartDir}
        //                 sed -i "s#PLACEHOLDER_VERSION#${betaVersion}#g" values.yaml
        //                 helm package .
        //                 mv mychart-0.1.0.tgz my-java-app-${betaVersion}.tgz
        //             """
        //         }
        //     }
        // }
    
        // stage('Publish to Nexus') {
        //     steps {
        //         script {
        //             sh "docker push ${nexus_url}/my-java-app:${betaVersion}"
        //             sh "curl -v -u admin:admin --upload-file mychart/my-java-app-${betaVersion}.tgz http://amrashraf.com:8081/repository/my-java-app-helm/my-chart-app-${betaVersion}.tgz"

        //         }
        //     }
        // }
    }
    // post {
    //     success {
    //         script {
    //             def homeDirectory = sh(script: 'echo $HOME', returnStdout: true).trim()
    //             echo "Home Directory: ${homeDirectory}"
    //             sh "echo '${betaVersion}' >> ${BETA_VERSION_FILE}"
    //         }
    //         archiveArtifacts "publish-artifacts/hello-world-web-${betaVersion}.war"
    //     }
    // }

}
def getVersionFromGitHub() {
    def version
    try {
        // Clone the repository to get the latest version
        def gitCredentialsId = 'github_key'
        checkout([
            $class: 'GitSCM',
            branches: [[name: 'develop']],
            userRemoteConfigs: [[
                url: 'https://github.com/amrashraf-web/Java_Project.git',
                credentialsId: gitCredentialsId
            ]]
        ])
        
        // Extract the latest version from the repository
        version = sh(script: 'git describe --tags --abbrev=0 || echo "0.0.1-beta-1"', returnStdout: true).trim()
    } finally {
        // Clean up by deleting the cloned repository
        deleteDir()
    }

    return version
}

def incrementVersion(currentVersion) {
    def versionParts = currentVersion.split('-')
    def versionNumbers = versionParts[0].split('\\.')

    // Increment the last part of the version number
    int lastPart = versionNumbers[2].toInteger() + 1

    // Check if the last part exceeds 9
    if (lastPart > 9) {
        // Increment the second part and reset the last part to 0
        versionNumbers[1] = (versionNumbers[1].toInteger() + 1).toString()
        lastPart = 0
    }

    // Update the version
    versionNumbers[2] = lastPart.toString()

    // Join the version parts back
    def newVersion = versionNumbers.join('.')
    newVersion += "-${versionParts[1]}"

    return newVersion
}

def commitAndPush(version) {
    // Configure Git credentials
    withCredentials([usernamePassword(credentialsId: env.GIT_CREDENTIALS_ID, passwordVariable: 'GIT_PASSWORD', usernameVariable: 'GIT_USERNAME')]) {
        // Set up Git configuration
        sh "git config --global user.email 'eng.amrashraf3@gmail.com'"
        sh "git config --global user.name 'amrashraf-web'"

        // Clone the repository again
        checkout([$class: 'Git', branches: [[name: '*/develop']], credentialsId: env.GIT_CREDENTIALS_ID, url: env.GIT_REPO_URL])

        // Make changes and commit
        sh "echo 'Version ${version}' > version.txt"
        sh 'git add .'
        sh "git commit -m 'Bump version to ${version}'"

        // Push the changes
        sh "git push origin develop"
    }
}
