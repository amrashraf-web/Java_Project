pipeline {
    agent any
    environment {
        REPO_NAME  = 'amrashraf-web/Java_Project'
        GITHUB_CREDENTIALS_ID = 'github_key'
        BRANCH_NAME  = 'develop'
    }
    stages {
        stage('Checkout') {
            steps {
                git url: "https://github.com/${env.REPO_NAME}.git",
                    credentialsId: "${env.GITHUB_CREDENTIALS_ID}",
                    branch: "${env.BRANCH_NAME}"
            }
        }
        stage('Get Latest Version') {
            steps {
                script {
                    // Define the variable outside of the script block
                    def latestVersion = sh(script: 'git tag --list 0.0.1-beta-* --sort=-v:refname | head -n 1', returnStdout: true).trim()

                    // If there are no tags matching the pattern, set the latest version to a default value.
                    if (latestVersion == null || latestVersion.isEmpty()) {
                        latestVersion = '0.0.1-beta-1'
                        echo "No tags found. Setting latestVersion to default: ${latestVersion}"
                    } else {
                        echo "Latest Version: ${latestVersion}"
                    }

                    // Extract the numeric part of the latest version and increment it by 1.
                    def newVersion = latestVersion.replaceAll(/.*-(\d+)$/){ _, num ->
                        num ? "${num.toInteger() + 1}" : "1"
                    }

                    // Print the new version.
                    echo "New Version: 0.0.1-beta-${newVersion}"
                    
                    // Set the new tag version for later use.
                    env.NEW_VERSION = "0.0.1-beta-${newVersion}"
                }
            }
        }
        stage('Commit and Push Tag') {
            steps {
                script {
                    // Increment the numeric part of the latest version and create a new version.
                    def newVersion = env.NEW_VERSION.replaceAll(/.*-(\d+)$/){ _, num ->
                        num ? "${num.toInteger() + 1}" : "2"
                    }

                    // Print the new version.
                    echo "New Version: 0.0.1-beta-${newVersion}"
                    env.NEW_VERSION = "0.0.1-beta-${newVersion}"

                    // Check if the tag already exists
                    def tagExists = sh(script: "git tag -l '${newVersion}'", returnStatus: true) == 0

                    // If the tag exists, continue incrementing until a unique version is found
                    while (tagExists) {
                        newVersion = newVersion.toInteger() + 1
                        env.NEW_VERSION = "0.0.1-beta-${newVersion}"
                        tagExists = sh(script: "git tag -l '${env.NEW_VERSION}'", returnStatus: true) == 0
                    }

                    // Commit the new tag and push it to the repository using GitHub credentials
                    withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: "${env.GITHUB_CREDENTIALS_ID}", usernameVariable: 'GIT_USERNAME', passwordVariable: 'GIT_PASSWORD']]) {
                        sh "git tag -a ${env.NEW_VERSION} -m 'Release ${env.NEW_VERSION}'"
                        sh "git push https://${GIT_USERNAME}:${GIT_PASSWORD}@github.com/${env.REPO_NAME}.git ${env.NEW_VERSION}"
                    }
                }
            }
        }

    }
}
