pipeline {
    agent any
    environment {
        GITHUB_REPO = 'amrashraf-web/Java_Project'
        GITHUB_CREDENTIALS_ID = 'github_key'
        VERSION_PREFIX = '0.0.1-beta'
        TARGET_BRANCH = 'develop'
        BRANCH_NAME = 'develop'
    }
    stages {
        stage('Print Branch Name') {
            steps {
                echo "Current branch: ${env.BRANCH_NAME}"
            }
        }
        stage('Get Latest Version') {
            when {
                expression { env.BRANCH_NAME == TARGET_BRANCH }
            }
            steps {
                script {
                    def latestTag = sh(script: "git ls-remote --tags https://github.com/${GITHUB_REPO}.git | grep 'refs/tags/${VERSION_PREFIX}' | cut -d '/' -f 3 | cut -d '^' -f 1 | sort -V | tail -n 1", returnStdout: true).trim()

                    if (latestTag) {
                        echo "Latest tag found: ${latestTag}"
                        env.LATEST_TAG = latestTag
                    } else {
                        echo "No tags found. Setting initial version."
                        env.LATEST_TAG = "${VERSION_PREFIX}-1"
                    }
                }
            }
        }

        stage('Create New Version') {
            when {
                expression { env.BRANCH_NAME == TARGET_BRANCH }
            }
            steps {
                script {
                    def versionNumber = env.LATEST_TAG.tokenize('-')[3].toInteger() + 1
                    env.NEW_VERSION = "${VERSION_PREFIX}-${versionNumber}"

                    echo "Creating new version: ${env.NEW_VERSION}"

                    withCredentials([usernamePassword(credentialsId: GITHUB_CREDENTIALS_ID, usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
                        sh """
                            git tag ${env.NEW_VERSION}
                            git push origin ${env.NEW_VERSION}
                        """
                    }
                }
            }
        }
    }
}
