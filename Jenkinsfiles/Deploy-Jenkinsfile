pipeline {
    agent any
    environment {
        GITHUB_REPO = 'amrashraf-web/Java_Project'
        GITHUB_CREDENTIALS_ID = 'github_key'
        VERSION_PREFIX = '0.0.1-beta'
        TARGET_BRANCH = 'develop'
    }
    stages {
        # stage('Get Latest Version and Increment') {
        #     steps {
        #         withCredentials([usernamePassword(credentialsId: 'github_key', passwordVariable: 'GIT_PASSWORD', usernameVariable: 'GIT_USERNAME')]) {
        #             sh '''#!/bin/bash
        #                 # get the latest version tag
        #                 LATEST_TAG=$(git describe --tags --abbrev=0 || echo '0.0.1-beta-0')
                        
        #                 # split the version into three parts: major, minor, and patch
        #                 MAJOR=$(echo $LATEST_TAG | cut -d'.' -f1)
        #                 MINOR=$(echo $LATEST_TAG | cut -d'.' -f2)
        #                 PATCH_AND_BETA=$(echo $LATEST_TAG | cut -d'.' -f3)
                        
        #                 # split the patch and beta parts
        #                 PATCH=$(echo $PATCH_AND_BETA | cut -d'-' -f1)
        #                 BETA=$(echo $PATCH_AND_BETA | cut -d'-' -f2)
                        
        #                 # check if the beta number is an integer
        #                 if ! [[ $BETA =~ ^[0-9]+$ ]]; then
        #                     BETA=0
        #                 fi
                        
        #                 # auto increment the beta number
        #                 BETA=$((BETA + 1))
        #                 NEW_TAG="$MAJOR.$MINOR.$PATCH-beta-$BETA"
                        
        #                 echo "Creating new tag: $NEW_TAG"
                        
        #                 # check if the tag already exists
        #                 if ! git rev-parse "$NEW_TAG" >/dev/null 2>&1; then
        #                     # create the new tag
        #                     git tag -a $NEW_TAG -m "Incrementing version number to $NEW_TAG"
                            
        #                     # push the new tag to GitHub
        #                     git push -f https://$GIT_USERNAME:$GIT_PASSWORD@github.com/amrashraf-web/Java_Project.git $NEW_TAG:develop
        #                 else
        #                     echo "Tag $NEW_TAG already exists"
        #                     git push -f https://$GIT_USERNAME:$GIT_PASSWORD@github.com/amrashraf-web/Java_Project.git $NEW_TAG:develop
        #                 fi
        #             '''
        #         }
        #     }
        # }
        stage('Get Latest Version') {
            when {
                expression { env.BRANCH_NAME == TARGET_BRANCH }
            }
            steps {
                script {
                    def latestTag = sh(script: "git ls-remote --tags https://github.com/${GITHUB_REPO}.git | grep 'refs/tags/${VERSION_PREFIX}' | cut -d '/' -f 3 | cut -d '^' -f 1 | sort -V | tail -n 1", returnStdout: true).trim()

                    if (latestTag) {
                        echo "Latest tag found: ${latestTag}"
                        env.LATEST_TAG = latestTag
                    } else {
                        echo "No tags found. Setting initial version."
                        env.LATEST_TAG = "${VERSION_PREFIX}-1"
                    }
                }
            }
        }

        stage('Create New Version') {
            when {
                expression { env.BRANCH_NAME == TARGET_BRANCH }
            }
            steps {
                script {
                    def versionNumber = env.LATEST_TAG.tokenize('-')[3].toInteger() + 1
                    env.NEW_VERSION = "${VERSION_PREFIX}-${versionNumber}"

                    echo "Creating new version: ${env.NEW_VERSION}"

                    withCredentials([usernamePassword(credentialsId: GITHUB_CREDENTIALS_ID, usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
                        sh """
                            git tag ${env.NEW_VERSION}
                            git push origin ${env.NEW_VERSION}
                        """
                    }
                }
            }
        }
    }
}
