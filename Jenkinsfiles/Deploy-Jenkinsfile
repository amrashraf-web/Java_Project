import jenkins.model.Jenkins
import hudson.util.*;
import java.util.concurrent.locks.ReentrantLock

def versionLock = new ReentrantLock()

pipeline {
    agent any              
    stages {
        stage('Checkout') {
            steps {
                script {
                    def gitCredentialsId = 'github_key'
                    checkout([
                        $class: 'GitSCM',
                        branches: [[name: 'develop']],
                        userRemoteConfigs: [[
                            url: 'https://github.com/amrashraf-web/Java_Project.git',
                            credentialsId: gitCredentialsId
                        ]],
                        extensions: [[$class: 'CleanBeforeCheckout']],
                        gitTool: 'Default'  // Set the Git tool installation
                    ])

                }
            }
        }
        stage('Create New Version Tag') {
            steps {
                script {
                    def version = generateNextBetaVersion('0.0.1-beta')
                    
                    if (!tagExists(version)) {
                        sh "git tag ${version}"
                        sh "git push origin ${version}"
                    } else {
                        echo "Tag '${version}' already exists."
                    }
                }
            }
        }
        
        stage('List All Tag Versions') {
            steps {
                script {
                    sh "git fetch --tags"
                    sh "git tag -l"
                }
            }
        }
            
        stage('Create Auto Increment Tag') {
            steps {
                script {
                    // Your auto-incrementing logic goes here
                    def lastBetaTag = sh(script: 'git describe --abbrev=0 --tags 2>/dev/null | grep "0.0.1-beta"', returnStdout: true).trim()
                    
                    versionLock.lock() // Acquire the lock
                    
                    try {
                        if (lastBetaTag) {
                            def version = generateNextBetaVersion(lastBetaTag)
                            
                            // Checkout the 'develop' branch
                            sh 'git checkout develop'
                            
                            // Create and push the tag
                            if (!tagExists(version)) {
                                sh "git tag ${version}"
                                sh "git push origin ${version}"
                            } else {
                                echo "Tag '${version}' already exists."
                            }
                        } else {
                            echo "No beta tags found. Assuming initial version."
                            // You can set a default version or take other appropriate action
                            def version = '0.0.1-beta-1'
                            
                            // Checkout the 'develop' branch
                            sh 'git checkout develop'
                            
                            // Create and push the tag
                            if (!tagExists(version)) {
                                sh "git tag ${version}"
                                sh "git push origin ${version}"
                            } else {
                                echo "Tag '${version}' already exists."
                            }
                        }
                    } finally {
                        versionLock.unlock() // Release the lock
                    }
                }
            }
        }

    }
    
    post {
        always {
            script {
                sh 'echo "Done"'
            }
        }
    }
}



def generateNextBetaVersion(baseVersion) {
    def matcher = (baseVersion =~ /.*-(beta-(\d+))/)
    
    if (matcher.matches()) {
        def lastBetaCount = matcher[0][2].toInteger()
        def nextBetaCount = lastBetaCount + 1
        return "${baseVersion}-${nextBetaCount}"
    } else {
        return "${baseVersion}-1"
    }
}

def tagExists(tag) {
    return sh(script: "git tag -l ${tag}", returnStatus: true) == 0
}