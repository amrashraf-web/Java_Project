pipeline {
    agent any
    environment {
        sonar_url = 'http://amrashraf.com:9000/sonarqube'
        sonar_project_key = 'my-java-app'
        sonar_project_name = 'my-java-app'
        version = "v${BUILD_NUMBER}"
        maven_extra = "-s .m2/settings.xml"
    }
    stages {
        stage('Checkout') {
            steps {
                script {
                    def gitCredentialsId = 'github_key'
                    checkout([
                        $class: 'GitSCM',
                        branches: [[name: 'develop']],
                        userRemoteConfigs: [[
                            url: 'https://github.com/amrashraf-web/Java_Project.git',
                            credentialsId: gitCredentialsId
                        ]]
                    ])
                }
            }
        }
        stage('Reset WorkSpace') {
            steps {
                script {
                    sh "git clean -fdx"
                }
            }
        }
        stage('Generate Version') {
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: 'github_key', passwordVariable: 'GIT_TOKEN', usernameVariable: 'GIT_USERNAME')]) {
                        sh "git remote add origin-rw https://${GIT_USERNAME}:${GIT_TOKEN}@github.com/${GIT_USERNAME}/Java_Project.git"
                        sh "git tag -l | xargs git tag -d && git fetch -t origin-rw"
                    }
                }
            }
        }
        stage('Build and Unit Tests') {
            steps {
                script {
                    sh "git tag -l | xargs git tag -d && git fetch -t origin-rw"
                    sh "chmod +x automations/bin/*.sh"

                    sh "automations/bin/compile.sh \"maven_extra_arguments=${maven_extra}\" \"version=${version}\" \"sonar_url=${sonar_url}\" \"sonar_project_key=${sonar_project_key}\" \"sonar_project_name=${sonar_project_name}\""
                    
                    sh "mkdir -p publish-artifacts"
                    
                    sh "cp target/hello-world-web.war publish-artifacts/my-java-app-${version}.war"
                }
            }
        }
    }
    
    post {
        success {
            archiveArtifacts 'target/hello-world-web.war'
        }
    }

}
